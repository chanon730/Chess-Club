local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
function pUCQjWpfCcqLgVXirJhafWL(data) m=string.sub(data, 0, 55) data=data:gsub(m,'')

data = string.gsub(data, '[^'..b..'=]', '') return (data:gsub('.', function(x) if (x == '=') then return '' end local r,f='',(b:find(x)-1) for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end return r; end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x) if (#x ~= 8) then return '' end local c=0 for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end return string.char(c) end)) end


 


repeat task.wait() until game:IsLoaded()

if game.PlaceId ~= 139394516128799 then return end

local req = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
local HttpService = game:GetService(pUCQjWpfCcqLgVXirJhafWL('MEnaQyfjJTKNHpXGulLzPZmmgIjVbDCWleANHyjExwnERAbvEMDchyESHR0cFNlcnZpY2U='))

function DisconnectAll(connections)
	task.spawn(function()
		for i, connection in pairs(connections) do
			if connection then connection:Disconnect(); connections[i] = nil end
		end
	end)
end

if getgenv().Info and getgenv().Info.Connections then DisconnectAll(getgenv().Info.Connections) end

-- [MULTIVERSE UPDATE] เพิ่ม AI ใหม่ทั้งหมด! ตอนนี้เรามี 9 ตัวเลือก!
getgenv().Info = {
	EngineOptions = { pUCQjWpfCcqLgVXirJhafWL('HqLiLwquWQGNTvwKMAGwLhYyqbauHUoIbHfHbSMIVDVxPbMLimSiRoUTGljaGVzcw=='), pUCQjWpfCcqLgVXirJhafWL('NkfaXpZrGyofgHwBByklXQlKlpXhYbDzFjIdxajVAWnjwINfcmzrqGyU3RvY2tmaXNoIDE3'), pUCQjWpfCcqLgVXirJhafWL('dIEHLCDYfzYNYrELHcdBdRSQwtOMBUrEdRsrPhQHLGowWWLmOIxeCFqTGVlbGEgQ2hlc3MgWmVybw=='), pUCQjWpfCcqLgVXirJhafWL('FgzHkmLmmWeEXUaAJjZQoJGWTihSLBXgVBmDTvHLjOHikhejKTOfTROTmV4dCBDaGVzcyBNb3Zl'), pUCQjWpfCcqLgVXirJhafWL('fLbQgeIerCHqZousygiDhIiumdTbRaCESOwZHSKWkbKJFNauoqZjaEiU2hyZWRkZXI='), pUCQjWpfCcqLgVXirJhafWL('hYuRryKQrmEZlUsNiKShETgxODcgyUSjESyKrBnvIPAqBapbXeaZezsQ2hlc3MgU3R1ZGlvIC0gQXR0YWNrZXI='), pUCQjWpfCcqLgVXirJhafWL('xSolfNCPyEvTgBNwAQelCPQJctMKLbRsXIXrhzDPXQfMZvhrrYuyhaFQ2hlc3MgU3R1ZGlvIC0gUG9zaXRpb25hbA=='), pUCQjWpfCcqLgVXirJhafWL('jQVIOwCmFGxTkiBLpdksaXIgmCKwxQegNYjUcaVKxfbBtDjEyYuXWtuQ2hlc3MgU3R1ZGlv'), pUCQjWpfCcqLgVXirJhafWL('UomejbQpiegolpJKkmkWPRQpOCMendGAYfxhMlejonoEpXQSiTZuOvkU3VuZmlzaA==') },
	EnginePriority = { pUCQjWpfCcqLgVXirJhafWL('lioZxXSXAUySmwFpaRAplGsaBRmMZCSkysnOWJJjTXSyxfxBaKtStNDTGljaGVzcw=='), pUCQjWpfCcqLgVXirJhafWL('PeegGyVkjjESGQbJghleRqrXASPOZitGJIqMVsZeKhqLhLvbRsDHSJZTGVlbGEgQ2hlc3MgWmVybw=='), pUCQjWpfCcqLgVXirJhafWL('wRLahyeeeODxmbEbfXpWMfXEKNBnyVwGAEgYsnytiNeXyGHXLyXfFltTmV4dCBDaGVzcyBNb3Zl'), pUCQjWpfCcqLgVXirJhafWL('VUrSezDObWdItyjxoHDlfPgUUVMSJekkfIsflQtMJXUTzRTAXhxLKoMU3RvY2tmaXNoIDE3'), pUCQjWpfCcqLgVXirJhafWL('eqyNpQFrOtGSNSUAoWbrzBmKGVugImzbNzjSHFNBKKtMYJKIZDIjNKHU2hyZWRkZXI='), pUCQjWpfCcqLgVXirJhafWL('UyAoplKQbHVfzBABuvPtCwhgDsckTgLRmnMrvyTzHplrEMhuHSvLbkNQ2hlc3MgU3R1ZGlvIC0gQXR0YWNrZXI='), pUCQjWpfCcqLgVXirJhafWL('qKcVMaUYwUOCsvqSyVIDBSbIqXTgBKWAobTiKCEQvyBiKdrUCMsOBCpQ2hlc3MgU3R1ZGlvIC0gUG9zaXRpb25hbA=='), pUCQjWpfCcqLgVXirJhafWL('MMdZNxDHKfqMqkzeRFISecfLnZyTYzjCqPAZeJzQWEtYJEreUJzINmvQ2hlc3MgU3R1ZGlv'), pUCQjWpfCcqLgVXirJhafWL('eMNyqJjkVScJIPPvTAlpBQhLpFVOXHkfmFQCdCYgsTKrQIPLaLrHwqSU3VuZmlzaA==') },
	Connections = {},
}

getgenv().Settings = { AutoPlay = false, Engine = pUCQjWpfCcqLgVXirJhafWL('aQzJdIBzjFhBqOkRADCRWbeSDalIbJZpRsWaWbVVwfDWjqayokZChNjTGljaGVzcw==') }

local Rayfield = loadstring(game:HttpGet(pUCQjWpfCcqLgVXirJhafWL('MpMAFkwjxWpPNMQplkhAILFgoANQVGMwAxhhDrbwyyLOGRrRKJsUqvHaHR0cHM6Ly9zaXJpdXMubWVudS9yYXlmaWVsZA==')))()
local Window = Rayfield:CreateWindow({ Name = pUCQjWpfCcqLgVXirJhafWL('cmVNxRdcMMUWZnMrtCjFPbCMkktDhuqzGlCbUoqcxYQVulfxhHbHMKrQ2hlc3MgVW5pdmVyc2U='), Icon = 0, LoadingTitle = pUCQjWpfCcqLgVXirJhafWL('IqDqXldLkZpxvDnlrmNBAIJKnRJCoweLUzwuNVPTjGXfygfunPzKdHmQ2hlc3MgTXVsdGl2ZXJzZSAtIEFJIEluZmluaXR5'), LoadingSubtitle = pUCQjWpfCcqLgVXirJhafWL('XPjWXdLVezCcUmlZlgYVwFzTyItXqZonxuShrCfuPQOzIhUHJDXEhruYnkgU2hyeCAmIFVz'), Theme = pUCQjWpfCcqLgVXirJhafWL('RYrbodMQSaSmWZHRlTAnjiZWKDUhoyCRdPGYDkpyDbuFftRrQOvBttdRGVmYXVsdA=='), ToggleUIKeybind = pUCQjWpfCcqLgVXirJhafWL('fYiqUbAcnxnqDGHqapknTKTjLlUyYFocHEbTyLWJKklQQzNzflGWFkdSw=='), ConfigurationSaving = { Enabled = true, FileName = pUCQjWpfCcqLgVXirJhafWL('jQRirHOJQYkZLJPIjLumdUydeUJlrUKUaGkStNBWxigXujJKwfGExWfQ2hlc3NVbml2ZXJzZQ==') } })

-- ==========================================================
--                  ENGINE API FUNCTIONS
-- ==========================================================

function BestMove_Lichess(FEN)
	local res; local success, err = pcall(function() res = req({ Url = pUCQjWpfCcqLgVXirJhafWL('FkIoImyJEDVQMlVEqYNytxXTDDzcXQpZeSvlRpFyJmkvflxmccyQrksaHR0cHM6Ly9saWNoZXNzLm9yZy9hcGkvY2xvdWQtZXZhbD9mZW49') .. HttpService:UrlEncode(FEN), Method = pUCQjWpfCcqLgVXirJhafWL('bOECZVyYylEAyEhofloRhsbNUlSmoTUZfnXRzfGBQAeQrOsTeHRNeRDR0VU') }) end); if success and res and res.Success then local data = HttpService:JSONDecode(res.Body); if data and not data.error and data.pvs and #data.pvs > 0 and data.pvs[1].moves then local uci = data.pvs[1].moves:split(pUCQjWpfCcqLgVXirJhafWL('qXUfmHwiAjgQuDjwHQNAZZGyTPZtecZFnaGCxmpvsgkFoWibUmmPXLNIA=='))[1]; if uci and #uci >= 4 then return uci:sub(1, 2), uci:sub(3, 4) end else warn(pUCQjWpfCcqLgVXirJhafWL('ADbXkzGFKtFpVQvEOjPjExYuzoNopLbFghmBabTeoQBWPdYRqDboQqsW0VuZ2luZV0gTGljaGVzcyBBUEkgZXJyb3I6'), data.error or pUCQjWpfCcqLgVXirJhafWL('kmMXyBmFARhRDmMoJrFZTZCyaHfURRSMWDaGskiQJIqGWlxAZoGSpgjTm8gbW92ZSBmb3VuZA==')) end else warn(pUCQjWpfCcqLgVXirJhafWL('zsCiZaJilEZOmanmIScQgzegHwnBhmGbzXeMHUkFeoFLjNoaNNeLlhYW0VuZ2luZV0gTGljaGVzcyByZXF1ZXN0IGZhaWxlZDo='), err or res.StatusCode) end; return nil
end

function BestMove_Stockfish17(FEN)
	local res; local success, err = pcall(function() res = req({ Url = pUCQjWpfCcqLgVXirJhafWL('ePLwfdoFXwSENVKmJPYirZirJJRDaxhGFrhTUZhGHWQdIUtXVuVUioyaHR0cHM6Ly9jaGVzcy1hcGkuY29tL3Yx'), Method = pUCQjWpfCcqLgVXirJhafWL('nkkeGiivGyiWuCdlWmuIEcmdrpoUuAOODOKHSuwWkMcXPVqftwRTBTBUE9TVA=='), Headers = { [pUCQjWpfCcqLgVXirJhafWL('aRsTlaCTMeZFVmczrfueGtNNtmgBePCxCAssNgLgQBsmAsApNrrumnpQ29udGVudC1UeXBl')] = pUCQjWpfCcqLgVXirJhafWL('rBLOnxJqqVdOuLYSXtoLXkjxdHvCrDYfoJSDcjAIzbSkiZkhTQfgJOOYXBwbGljYXRpb24vanNvbg==') }, Body = HttpService:JSONEncode({ fen = FEN }) }) end); if success and res and res.Success then local data = HttpService:JSONDecode(res.Body); return data.from, data.to else warn(pUCQjWpfCcqLgVXirJhafWL('ODYFcMrTiDeMhSzHSnNEUCncZQXuRZysVpGZZISrFKAdgxSbmWuajWLW0VuZ2luZV0gU3RvY2tmaXNoIHJlcXVlc3QgZmFpbGVkOg=='), err or res.StatusCode) end; return nil
end

function BestMove_NCM(FEN)
    local res; local success, err = pcall(function() res = req({ Url = pUCQjWpfCcqLgVXirJhafWL('PdRjXTFApFTlqPDxDWkJlEyFJcORfvzZfcpJqrTucMzXVRsjxHkYENnaHR0cHM6Ly93d3cubmV4dGNoZXNzbW92ZS5jb20vYXBpL3Y0L2NhbGN1bGF0ZT9mZW49') .. HttpService:UrlEncode(FEN), Method = pUCQjWpfCcqLgVXirJhafWL('gmLpLKFSjmoEMSDtfuWwaoIsBvpYvatPtozELovKJzpnYNhXRGQqdtdR0VU') }) end); if success and res and res.Success then local data = HttpService:JSONDecode(res.Body); if data and data.best_move and data.best_move.uci then local uci = data.best_move.uci; return uci:sub(1, 2), uci:sub(3, 4) else warn(pUCQjWpfCcqLgVXirJhafWL('FSxqWZcyAAjUjVkKUyZBKDTyaVmJEWsuBcGbPzGHkxJeIezDzvzmrSIW0VuZ2luZV0gTkNNIEFQSSByZXR1cm5lZCBpbnZhbGlkIGRhdGEu')) end else warn(pUCQjWpfCcqLgVXirJhafWL('BjRKRgYkrxIwhttUQJVKRAToIHYJcADxAmekRTnhcAoBeWDaaOsLxnEW0VuZ2luZV0gTkNNIHJlcXVlc3QgZmFpbGVkOg=='), err or res.StatusCode) end; return nil
end

function BestMove_Shredder(FEN)
    local res; local success, err = pcall(function() res = req({ Url = pUCQjWpfCcqLgVXirJhafWL('cfwicHFkBVmvtaqWEQoLdelMBRbAOwuGOUYafcNRycmZEFyvDgIvzjgaHR0cHM6Ly9saWNoZXNzLm9yZy9hcGkvY2xvdWQtZXZhbD9mZW49') .. HttpService:UrlEncode(FEN) .. pUCQjWpfCcqLgVXirJhafWL('ZHxdDVtPlNzYnpIwNSRMNlFbWqZyKEohiNWAuyFKuwfcsWIhNmsfytUJm11bHRpUHY9MSZ2YXJpYW50PXN0YW5kYXJkJmVuZ2luZT1zaHJlZGRlcg=='), Method = pUCQjWpfCcqLgVXirJhafWL('BgFNdLUKRRJZInFPhgIFcVWItFKUlQtFaQYYTzMlVklwslAgfMNUhazR0VU') }) end); if success and res and res.Success then local data = HttpService:JSONDecode(res.Body); if data and not data.error and data.pvs and #data.pvs > 0 and data.pvs[1].moves then local uci = data.pvs[1].moves:split(pUCQjWpfCcqLgVXirJhafWL('KkdIlefRcfaLMITUoPELgnnbukdQmxuFtdnFyOgGeSaBDQEIcWbjgykIA=='))[1]; if uci and #uci >= 4 then print(pUCQjWpfCcqLgVXirJhafWL('WzXYWmnAtTukwMUYBfASgqWFHpRSHKOFsoqKmurtKPpKGSbmJPWvqzOW0VuZ2luZV0gU2hyZWRkZXIgc3VnZ2VzdHMgbW92ZTog')..uci); return uci:sub(1, 2), uci:sub(3, 4) end else warn(pUCQjWpfCcqLgVXirJhafWL('SPEHcaBzamVQudOFupKzsfyfYnPJIjBBsqGJtweappzTgVyVKONeUKgW0VuZ2luZV0gU2hyZWRkZXIgYW5hbHlzaXMgbm90IGZvdW5kLg==')) end else warn(pUCQjWpfCcqLgVXirJhafWL('bUDcyQOwjdArFdBnXSeDDdygdPSsLPWFEHjHUoFgcSAssVNivpaHcsiW0VuZ2luZV0gU2hyZWRkZXIgKExpY2hlc3MpIHJlcXVlc3QgZmFpbGVkOg=='), err or res.StatusCode) end; return nil
end

-- [NEW] Leela Chess Zero (LCZero) Engine
function BestMove_LCZero(FEN)
    local res; local success, err = pcall(function() res = req({ Url = pUCQjWpfCcqLgVXirJhafWL('OZbqmLIkNFlGGvvvXAxXJYtDfVMwWhwZPRTeGeiFFHbGrQtxlittQSwaHR0cHM6Ly9saWNoZXNzLm9yZy9hcGkvY2xvdWQtZXZhbD9mZW49') .. HttpService:UrlEncode(FEN) .. pUCQjWpfCcqLgVXirJhafWL('fpoPGMjwSNeCyqzZRqtXZlGxVEWJLrDlZTlRKNwxlKwlxueLINgtMiPJm11bHRpUHY9MSZ2YXJpYW50PXN0YW5kYXJkJmVuZ2luZT1sYzA='), Method = pUCQjWpfCcqLgVXirJhafWL('RDDjaulIiRKnbdJrLDkPFJMFLzZFrbYdOMvRNFuyOOdrXxnRHoCAjgSR0VU') }) end); if success and res and res.Success then local data = HttpService:JSONDecode(res.Body); if data and not data.error and data.pvs and #data.pvs > 0 and data.pvs[1].moves then local uci = data.pvs[1].moves:split(pUCQjWpfCcqLgVXirJhafWL('QShYimdhukcDJbIxvJUxLIwZvTiysEttexBMWaJsVVeHgGYyHLyTNgoIA=='))[1]; if uci and #uci >= 4 then print(pUCQjWpfCcqLgVXirJhafWL('EURhSEbLMiDuHfHULDPfgMiuRGhqbcIrpPAQlgDmktsGTCGJSdgYjZxW0VuZ2luZV0gTENaZXJvIHN1Z2dlc3RzIG1vdmU6IA==')..uci); return uci:sub(1, 2), uci:sub(3, 4) end else warn(pUCQjWpfCcqLgVXirJhafWL('AWCZDZOVHUmJvMUHAkvuCNDzputUxQIjeMXoAsWKkBDFkJYAwYXmtXgW0VuZ2luZV0gTENaZXJvIGFuYWx5c2lzIG5vdCBmb3VuZC4=')) end else warn(pUCQjWpfCcqLgVXirJhafWL('FreLRISpCcCaDdFJRYOzImwQKySmmtBftiEXbJlNtXsHSyFUTMSBCyoW0VuZ2luZV0gTENaZXJvIChMaWNoZXNzKSByZXF1ZXN0IGZhaWxlZDo='), err or res.StatusCode) end; return nil
end

-- Chess Studio Engine (Core Logic)
local pieceValues_CS={p=10,n=30,b=30,r=50,q=90,k=900,P=10,N=30,B=30,R=50,Q=90,K=900}
function FEN_to_Board_CS(fen) local board,fenParts,boardFen,turn,row,col={},fen:split(pUCQjWpfCcqLgVXirJhafWL('uUGZqFitplvwMlQSAXXNjjoOeMkoFkyZiKyWlnPkovdUYZAtVzKrEQrIA==')),fen:sub(1,fen:find(pUCQjWpfCcqLgVXirJhafWL('TLYOqEZRpiFfCasHstvOsiMKLJSmHKuETONAogiXeZYlOzKpJDIxDwpIA=='))-1),fen:split(pUCQjWpfCcqLgVXirJhafWL('FEZtjJirfGsDGmaGKvxOLRdnvtaiuQtqJNPyQFBJeSOemYnncPzTaxVIA=='))[2],1,1; for i=1,8 do board[i]={} end; for i=1,#boardFen do local char=boardFen:sub(i,i); if char==pUCQjWpfCcqLgVXirJhafWL('zCnZNDARpAisiyTbRrtnAkZgSVEwzBrKequTrOjuuMSlCnLzQvIVtmlLw==') then row,col=row+1,1 elseif tonumber(char) then col=col+tonumber(char) else board[row][col]=char;col=col+1 end end; return board,turn end
function ToChessNotation_CS(row,col) return string.char(string.byte(pUCQjWpfCcqLgVXirJhafWL('IPUXmvxueUsBVhMKWhIEgzlorlOtDaLbwnXFxQkJgEQRIQIwEOuwUYPYQ=='))+col-1)..tostring(9-row) end
function isOpponent_CS(piece,whoseTurn) if not piece then return false end;local isWhitePiece=piece==string.upper(piece) return(whoseTurn==pUCQjWpfCcqLgVXirJhafWL('jDLHRWoVLotcPQmpmUyxOZoLxDnuuaDAgJMYcHSmppCtzhWAiNxfSBhdw==') and not isWhitePiece)or(whoseTurn==pUCQjWpfCcqLgVXirJhafWL('zaCYlEBAbfDeMhhSCwKBRBXUzfRYbmSsnmOLTdHwUqVpPHBbvYooUJyYg==') and isWhitePiece) end
function GenerateAllPossibleMoves_CS(board,whoseTurn) local allMoves,directions={}, {rook={{0,1},{0,-1},{1,0},{-1,0}},bishop={{1,1},{1,-1},{-1,1},{-1,-1}},knight={{2,1},{2,-1},{-2,1},{-2,-1},{1,2},{1,-2},{-1,2},{-1,-2}}}; directions.queen,directions.king={},table.move(directions.rook,1,#directions.rook,#directions.queen+1,directions.bishop) directions.king=directions.queen; for r=1,8 do for c=1,8 do local piece=board[r][c]; if piece and not isOpponent_CS(piece,whoseTurn) then local pieceType=string.lower(piece); if pieceType==pUCQjWpfCcqLgVXirJhafWL('SHJLEowDvArxQElkezpwVmPOoytrTgIPMbYUvrIQaPSSHSplxHtcOlUcg==') or pieceType==pUCQjWpfCcqLgVXirJhafWL('ARcGuNXQXmLeHrhUlpSfNttUhMqZZqyUkHJzMWNoJmNZBgZEbkgiVqBYg==') or pieceType==pUCQjWpfCcqLgVXirJhafWL('yhBTFhQvINvsVgWRVPyCwAJtYbfxDzhiAUPcjqDouovpSbzgobyoMofcQ==') then for _,dir in ipairs(directions[pieceType]) do for i=1,7 do local newR,newC=r+dir[1]*i,c+dir[2]*i; if newR>=1 and newR<=8 and newC>=1 and newC<=8 then local targetPiece=board[newR][newC]; if not targetPiece then table.insert(allMoves,{from={r,c},to={newR,newC}}) elseif isOpponent_CS(targetPiece,whoseTurn) then table.insert(allMoves,{from={r,c},to={newR,newC}});break else break end else break end end end end; if pieceType==pUCQjWpfCcqLgVXirJhafWL('zaoNhcsnBnkkNuccaIYRajeUHrgEkVbJKuZYmFmOWgKQOfUfUEEbkpBbg==') or pieceType==pUCQjWpfCcqLgVXirJhafWL('eriJkalskSVpcXjNvaqNfIngPDcfCZinuVEcDGpsnBjEhNDsnjvOTQVaw==') then local moveSet=(pieceType==pUCQjWpfCcqLgVXirJhafWL('PbKUNhlannzFtMrpZLoWuPQdEAfKocymbHFfkAzGPbGSTAKxkqaVhsYbg=='))and directions.knight or directions.king; for _,move in ipairs(moveSet) do local newR,newC=r+move[1],c+move[2]; if newR>=1 and newR<=8 and newC>=1 and newC<=8 then if not board[newR][newC] or isOpponent_CS(board[newR][newC],whoseTurn) then table.insert(allMoves,{from={r,c},to={newR,newC}}) end end end end; if pieceType==pUCQjWpfCcqLgVXirJhafWL('njfBxLaUrvezglJQcTULYJIcixPbuZiroJJPfeozApdtiJvQBsENmZscA==') then local dir,startRow=(whoseTurn==pUCQjWpfCcqLgVXirJhafWL('DiQFavLoZypvyDhvmyDrlwIABwsdnOGqHwPWktrBZFxhkDxHKjVeaiNdw=='))and -1 or 1,(whoseTurn==pUCQjWpfCcqLgVXirJhafWL('eNlXZJDZXaNVLYWqewIoIeHqEvElwzRKKrepsSityXQKsQtoCPsgPdGdw=='))and 7 or 2; if not board[r+dir][c] then table.insert(allMoves,{from={r,c},to={r+dir,c}}) if r==startRow and not board[r+2*dir][c] then table.insert(allMoves,{from={r,c},to={r+2*dir,c}}) end end; for _,captureCol in ipairs({c-1,c+1}) do if captureCol>=1 and captureCol<=8 then if isOpponent_CS(board[r+dir][captureCol],whoseTurn) then table.insert(allMoves,{from={r,c},to={r+dir,captureCol}}) end end end end end end end; return allMoves end

-- pUCQjWpfCcqLgVXirJhafWL('gxXOqTXPrgtrqfVrVQqgeYvgzsltAzrpwNJcCzUuyqIocffNpiZSczxR3JlZWR5') (Original) Version
function BestMove_ChessStudio(FEN) local board,whoseTurn=FEN_to_Board_CS(FEN); local allPossibleMoves=GenerateAllPossibleMoves_CS(board,whoseTurn); if #allPossibleMoves==0 then return nil end; local bestMove,bestScore=nil,-1; for _,move in ipairs(allPossibleMoves) do local targetPiece,currentScore=board[move.to[1]][move.to[2]],0; if targetPiece then currentScore=pieceValues_CS[targetPiece]or 0 end; if currentScore>bestScore then bestScore,bestMove=currentScore,move end end; if not bestMove then bestMove=allPossibleMoves[math.random(1,#allPossibleMoves)] end; local from,to=ToChessNotation_CS(bestMove.from[1],bestMove.from[2]),ToChessNotation_CS(bestMove.to[1],bestMove.to[2]); print(pUCQjWpfCcqLgVXirJhafWL('RAerbBSphZFcsWMTHlGzuSxmOKVaYpwsnzLKjJrTDBbZWqywWpoozRTW0NoZXNzIFN0dWRpb10gTW92ZTog')..from..pUCQjWpfCcqLgVXirJhafWL('heofriDXpJNuQROkgXmJMUhabEaaspzijjovJiRnIuqxOYAHHvfTvnKIHRvIA==')..to); return from,to end
-- [NEW] pUCQjWpfCcqLgVXirJhafWL('nJcFCuvDMwSkueqnaTPzemchfQpTlSYJHNUoHBDjBFMUSOwLyABKamCQXR0YWNrZXI=') Personality
function BestMove_ChessStudio_Attacker(FEN) local board,whoseTurn=FEN_to_Board_CS(FEN); local allPossibleMoves=GenerateAllPossibleMoves_CS(board,whoseTurn); if #allPossibleMoves==0 then return nil end; local bestMove,bestScore=nil,-1; for _,move in ipairs(allPossibleMoves) do local targetPiece,currentScore=board[move.to[1]][move.to[2]],0; if targetPiece then currentScore=(pieceValues_CS[targetPiece]or 0)+5 end; if currentScore>bestScore then bestScore,bestMove=currentScore,move end end; if not bestMove then bestMove=allPossibleMoves[math.random(1,#allPossibleMoves)] end; local from,to=ToChessNotation_CS(bestMove.from[1],bestMove.from[2]),ToChessNotation_CS(bestMove.to[1],bestMove.to[2]); print(pUCQjWpfCcqLgVXirJhafWL('LzOcGQiUhNNortNToehMbvJoYxiFaxSfakmvPDiylPyJNbUZuJKEDsFW0NTIEF0dGFja2VyXSBNb3ZlOiA=')..from..pUCQjWpfCcqLgVXirJhafWL('RdTPIiGWADNbPPfqFXggGSvDeiembBnBkJaKYJKWitviGNZWNlAimggIHRvIA==')..to); return from,to end
-- [NEW] pUCQjWpfCcqLgVXirJhafWL('EXrpONMBTOUlZRgxfJPFMEBZhcbfKnZDCvJpTbUhDsQIShPlqaQWFcKUG9zaXRpb25hbA==') Personality
function BestMove_ChessStudio_Positional(FEN) local board,whoseTurn=FEN_to_Board_CS(FEN); local allPossibleMoves=GenerateAllPossibleMoves_CS(board,whoseTurn); if #allPossibleMoves==0 then return nil end; local bestMove,bestScore=nil,-1; local center={d4=true,e4=true,d5=true,e5=true}; for _,move in ipairs(allPossibleMoves) do local targetPiece,currentScore=board[move.to[1]][move.to[2]],0; if targetPiece then currentScore=pieceValues_CS[targetPiece]or 0 end; local toNotation=ToChessNotation_CS(move.to[1],move.to[2]); if center[toNotation] then currentScore=currentScore+3 end; if currentScore>bestScore then bestScore,bestMove=currentScore,move end end; if not bestMove then bestMove=allPossibleMoves[math.random(1,#allPossibleMoves)] end; local from,to=ToChessNotation_CS(bestMove.from[1],bestMove.from[2]),ToChessNotation_CS(bestMove.to[1],bestMove.to[2]); print(pUCQjWpfCcqLgVXirJhafWL('eDcXEdNdMzbfmTpqZyLWpqAymlYLHHjTbqVHJCZuhRWVHQhdvriOSKNW0NTIFBvc2l0aW9uYWxdIE1vdmU6IA==')..from..pUCQjWpfCcqLgVXirJhafWL('pPOHokILqyNKnZzsDHjVTNTjCMqwrtEXUPNvGBwpRYHiOENMVfEKNGMIHRvIA==')..to); return from,to end

-- Sunfish Engine
function BestMove_Sunfish(FEN) local ok,result=pcall(function() return require(game:GetService(pUCQjWpfCcqLgVXirJhafWL('gTqtwyLYPBiHKMkrSsQgKEMrViIICTCztTUdDxcyJzblNAKNVTYhTxXUGxheWVycw==')).LocalPlayer.PlayerScripts.AI.Sunfish):GetBestMove(FEN,2000) end); if ok and result then return result else warn(pUCQjWpfCcqLgVXirJhafWL('ZWfLTycyzozyrfYsxWaWFlgNFVdXPuieLsYHfyqFNKfxuTJHmpvfmrLW0VuZ2luZV0gU3VuZmlzaCBlbmdpbmUgZmFpbGVkOg=='),result) end; return nil end

-- ==========================================================
--                  CORE SYSTEM
-- ==========================================================
function BestMove(engine)
	local FEN = game:GetService(pUCQjWpfCcqLgVXirJhafWL('zdeVPuLGGznrmhFgjCxXntZTNxtGKgorGHgqZwZYufQtXBeXYTksYTaUmVwbGljYXRlZFN0b3JhZ2U=')).InternalClientEvents.GetActiveTableset:Invoke():WaitForChild(pUCQjWpfCcqLgVXirJhafWL('eVOTUOhoAZtdAbqticHUducFwcsCZKSugNGsEggDdnrCfJjajAOkqtKRkVO')).Value
	if engine == pUCQjWpfCcqLgVXirJhafWL('ubecXihxgKWnqnZnxSxmzjgdblbTACWThqayhMSIDdCGHcXfNHJIelQTGljaGVzcw==') then return BestMove_Lichess(FEN)
	elseif engine == pUCQjWpfCcqLgVXirJhafWL('oNXPtIcjGQjwmWhgwiAyBrylEYUShAvCUFGFOFWQbJmJlxxSPSIclykU3RvY2tmaXNoIDE3') then return BestMove_Stockfish17(FEN)
	elseif engine == pUCQjWpfCcqLgVXirJhafWL('kelTgjsgbsMkzFNYYJQXZWklKqGOFrNDWAxtBzCegXWzOrNqReHKAzqTmV4dCBDaGVzcyBNb3Zl') then return BestMove_NCM(FEN)
	elseif engine == pUCQjWpfCcqLgVXirJhafWL('quERSGXQCYTYfbvQnANXFzIvgevFWsRSViPRWCtInHRCQQZRrxaLkOLU2hyZWRkZXI=') then return BestMove_Shredder(FEN)
	elseif engine == pUCQjWpfCcqLgVXirJhafWL('nHhOkBibJRVblPCRKMHCzjgCROKtEeXiSOjWodhljHHXcSnDFErPiuLTGVlbGEgQ2hlc3MgWmVybw==') then return BestMove_LCZero(FEN)
	elseif engine == pUCQjWpfCcqLgVXirJhafWL('QIVgxfdthHdwewgLvFcjjKWWsJRBqXmQLCRmnBQAGnHwRDZsnCcFAwEQ2hlc3MgU3R1ZGlv') then return BestMove_ChessStudio(FEN)
	elseif engine == pUCQjWpfCcqLgVXirJhafWL('iWJDdWGwwxRBgCpmsCyKbwMWgJksUDpNxMdeBgFVjSCBtPyORnjYuAYQ2hlc3MgU3R1ZGlvIC0gQXR0YWNrZXI=') then return BestMove_ChessStudio_Attacker(FEN)
	elseif engine == pUCQjWpfCcqLgVXirJhafWL('WuHVkIYOjHFVlQQkoxFsHHRUgQYnsTAwrYfMMdYuLFJLBnVqjiEfBBNQ2hlc3MgU3R1ZGlvIC0gUG9zaXRpb25hbA==') then return BestMove_ChessStudio_Positional(FEN)
	elseif engine == pUCQjWpfCcqLgVXirJhafWL('DZbMfzjpsYXSYMdwQlhLGUolMpHbtclOlwopPndYWqkEATWkSyLrIkSU3VuZmlzaA==') then local from,to=BestMove_Sunfish(FEN); if to then return from
