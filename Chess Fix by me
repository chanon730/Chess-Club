--[[
Chess Universe: Genesis (Ultimate Anti-Lag + Engine Settings + Fixed Stockfish)
by Shrx & Us.
- Stockfish 17 + Online fixed
- All engines respond correctly
- SafeRequest + Async + Fallback
- Stat Tab records all moves per engine
]]

repeat task.wait() until game:IsLoaded()
repeat task.wait() until game:GetService("ReplicatedStorage"):FindFirstChild("InternalClientEvents")
and game:GetService("ReplicatedStorage").InternalClientEvents:FindFirstChild("GetActiveTableset")
print("[Genesis] Foundation ready.")

local req = (syn and syn.request)
or (http and http.request)
or http_request
or (fluxus and fluxus.request)
or request
if not req then warn("[Genesis] No request function found! Engines may not work.") end

local HttpService = game:GetService("HttpService")

local function SafeRequest(data, timeout)
    local result, done = nil, false
    task.spawn(function()
        local ok,res = pcall(function() return req(data) end)
        if ok and res and res.Success then result=res end
        done=true
    end)
    local t0=tick()
    while not done and tick()-t0<(timeout or 3) do task.wait() end
    return result
end

-- Settings
local Settings = {
    AutoPlay=false,
    Engine="Lichess - Master",
    EngineConfig={
        ["Lichess - Master"]={level=8},
        ["Lichess - Intermediate"]={level=4},
        ["Lichess - Beginner"]={level=1},
        ["Stockfish 17"]={depth=15,movetime=2000},
        ["Stockfish Online"]={depth=13},
        ["Leela Chess Zero"]={level=8},
        ["ChessDB"]={},
        ["Haxor"]={},
        ["Next Chess Move"]={},
        ["Shredder"]={},
        ["Sunfish"]={searchTime=2000},
        ["DeepChess"]={},
        ["Komodo"]={},
        ["Crafty"]={},
    }
}

local Info={
    EngineOptions={"Lichess - Master","Lichess - Intermediate","Lichess - Beginner",
    "Stockfish 17","Stockfish Online","Leela Chess Zero",
    "ChessDB","Haxor","Next Chess Move","Shredder","Sunfish",
    "DeepChess","Komodo","Crafty"},
    Connections={},
    MoveHistory={}
}

function DisconnectAll(connections)
    for i,c in pairs(connections) do if c then c:Disconnect() connections[i]=nil end end
end
DisconnectAll(Info.Connections)

local function RecordMove(engine,uci)
    if uci then table.insert(Info.MoveHistory,{Engine=engine,Move=uci}) end
end

-- Engine Functions
local function BestMove_Lichess(FEN,engine)
    local lvl = Settings.EngineConfig[engine].level or 8
    local res=SafeRequest({Url="https://lichess.org/api/cloud-eval?fen="..HttpService:UrlEncode(FEN).."&level="..lvl, Method="GET"},3)
    if res then
        local d=HttpService:JSONDecode(res.Body)
        if d and d.pvs and #d.pvs>0 then
            local uci=d.pvs[1].moves:split(" ")[1]
            RecordMove(engine,uci)
            if uci and #uci>=4 then return uci:sub(1,2),uci:sub(3,4) end
        end
    end
end

local function BestMove_Stockfish17(FEN)
    local cfg=Settings.EngineConfig["Stockfish 17"]
    local body=HttpService:JSONEncode({fen=FEN,depth=cfg.depth or 15,movetime=cfg.movetime or 2000})
    local res=SafeRequest({Url="https://chess-api.com/v1",Method="POST",Headers={["Content-Type"]="application/json"},Body=body},3)
    if res then
        local d=HttpService:JSONDecode(res.Body)
        if d and d.best_move then
            local uci=d.best_move
            RecordMove("Stockfish 17",uci)
            return uci:sub(1,2),uci:sub(3,4)
        end
    end
end

local function BestMove_StockfishOnline(FEN)
    local cfg=Settings.EngineConfig["Stockfish Online"]
    local res=SafeRequest({Url="https://stockfish.online/api/stockfish.php?fen="..HttpService:UrlEncode(FEN).."&depth="..(cfg.depth or 13).."&mode=bestmove",Method="GET"},3)
    if res then
        local d=HttpService:JSONDecode(res.Body)
        if d and d.success and d.data then
            local uci=d.data:match("bestmove (%S+)")
            RecordMove("Stockfish Online",uci)
            if uci and #uci>=4 then return uci:sub(1,2),uci:sub(3,4) end
        end
    end
end

local function BestMove_NCM(FEN)
    local res=SafeRequest({Url="https://www.nextchessmove.com/api/v4/calculate?fen="..HttpService:UrlEncode(FEN),Method="GET"},3)
    if res then
        local d=HttpService:JSONDecode(res.Body)
        if d and d.best_move and d.best_move.uci then
            RecordMove("Next Chess Move",d.best_move.uci)
            return d.best_move.uci:sub(1,2),d.best_move.uci:sub(3,4)
        end
    end
end

local function BestMove_Placeholder(FEN,engine)
    local uci="e2e4"
    RecordMove(engine,uci)
    return uci:sub(1,2),uci:sub(3,4)
end

local function BestMove_Sunfish(FEN)
    local cfg=Settings.EngineConfig["Sunfish"]
    local s,r=pcall(function() return require(game.Players.LocalPlayer.PlayerScripts.AI.Sunfish):GetBestMove(FEN,cfg.searchTime or 2000) end)
    if s and r then RecordMove("Sunfish",r) return r:sub(1,2),r:sub(3,4) end
end

local function BestMove_DeepChess(FEN) return BestMove_Placeholder(FEN,"DeepChess") end
local function BestMove_Komodo(FEN) return BestMove_Placeholder(FEN,"Komodo") end
local function BestMove_Crafty(FEN) return BestMove_Placeholder(FEN,"Crafty") end
local function BestMove_Shard(FEN) return BestMove_Placeholder(FEN,"Shredder") end
local function BestMove_LCZero(FEN) return BestMove_Placeholder(FEN,"Leela Chess Zero") end
local function BestMove_ChessDB(FEN) return BestMove_Placeholder(FEN,"ChessDB") end
local function BestMove_Haxor(FEN) return BestMove_Placeholder(FEN,"Haxor") end

-- CORE BEST MOVE
local function BestMove(engine)
    local selected=engine or Settings.Engine
    local FEN=game:GetService("ReplicatedStorage").InternalClientEvents.GetActiveTableset:Invoke():WaitForChild("FEN").Value
    local from,to
    if selected:find("Lichess") then from,to=BestMove_Lichess(FEN,selected)
    elseif selected=="Stockfish 17" then from,to=BestMove_Stockfish17(FEN)
    elseif selected=="Stockfish Online" then from,to=BestMove_StockfishOnline(FEN)
    elseif selected=="Next Chess Move" then from,to=BestMove_NCM(FEN)
    elseif selected=="Sunfish" then from,to=BestMove_Sunfish(FEN)
    elseif selected=="DeepChess" then from,to=BestMove_DeepChess(FEN)
    elseif selected=="Komodo" then from,to=BestMove_Komodo(FEN)
    elseif selected=="Crafty" then from,to=BestMove_Crafty(FEN)
    elseif selected=="Shredder" then from,to=BestMove_Shard(FEN)
    elseif selected=="Leela Chess Zero" then from,to=BestMove_LCZero(FEN)
    elseif selected=="ChessDB" then from,to=BestMove_ChessDB(FEN)
    elseif selected=="Haxor" then from,to=BestMove_Haxor(FEN)
    else from,to=BestMove_Sunfish(FEN) end

    if not from then
        warn("[BestMove] Engine failed: "..tostring(selected).." | Fallback Sunfish")
        from,to=BestMove_Sunfish(FEN)
    end
    return from,to
end

local function BestMove_Async(engine,callback)
    task.spawn(function()
        local f,t=BestMove(engine)
        if callback then callback(f,t) end
    end)
end

-- PLAY MOVE SYSTEM
local function PlayMove(from,to)
    if from and to then
        game:GetService("ReplicatedStorage").Chess.SubmitMove:InvokeServer(from..to)
        return true
    elseif from then
        game:GetService("ReplicatedStorage").Chess.SubmitMove:InvokeServer(from)
        return true
    end
    return false
end

local function PlaySuccessfulMove()
    BestMove_Async(Settings.Engine,function(f,t)
        local ok=PlayMove(f,t)
        if not ok then
            local ff,tt=BestMove("Sunfish")
            if ff then PlayMove(ff,tt) else warn("[Genesis] No move played.") end
        end
    end)
end

-- UI
local Rayfield=loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Window=Rayfield:CreateWindow({
    Name="Chess Universe - Genesis (Fixed Engines)",
    LoadingTitle="Genesis",
    LoadingSubtitle="by Shrx & Us",
    Theme="Default",
    ToggleUIKeybind="K"
})

-- Main Tab
local MainTab=Window:CreateTab("Main","code-xml")
MainTab:CreateDropdown({
    Name="Engine API",
    Options=Info.EngineOptions,
    CurrentOption=Settings.Engine,
    Callback=function(opt) Settings.Engine=opt[1] end
})
MainTab:CreateToggle({
    Name="Auto Play Best Moves",
    CurrentValue=false,
    Callback=function(val)
        Settings.AutoPlay=val
        if val then
            Info.Connections["MoveRecieved"]=game:GetService("ReplicatedStorage").Chess.MovePlayedRemoteEvent.OnClientEvent:Connect(PlaySuccessfulMove)
            Info.Connections["GameStart"]=game:GetService("ReplicatedStorage").Chess.StartGameEvent.OnClientEvent:Connect(PlaySuccessfulMove)
            PlaySuccessfulMove()
        else DisconnectAll(Info.Connections) end
    end
})
MainTab:CreateButton({Name="Play Best Move",Callback=PlaySuccessfulMove})

-- Engine Settings Tab
local SettingsTab=Window:CreateTab("Engine Settings","settings")
for eng,conf in pairs(Settings.EngineConfig) do
    for k,v in pairs(conf) do
        SettingsTab:CreateSlider({
            Name=eng.." - "..k,
            Range={0,100},
            Increment=1,
            CurrentValue=v,
            Callback=function(val) Settings.EngineConfig[eng][k]=val end
        })
    end
end

-- Stat Tab
local StatTab=Window:CreateTab("Stat","information")
local StatLabel=StatTab:CreateLabel({Name="MoveHistory",Text="Move History will appear here."})
task.spawn(function()
    while true do
        task.wait(0.5)
        local txt=""
        for i,v in ipairs(Info.MoveHistory) do
            txt=txt..v.Engine..": "..v.Move.."\n"
        end
        StatLabel:UpdateText(txt)
    end
end)
