--[[
    Chess Universe: The Five Warlords
    Following the master's classic philosophy, we do not reinvent. We adapt.
    A new, unique challenger, Next Chess Move, has been integrated by
    copying and meticulously modifying the proven original logic.
    Our army of champions grows stronger on its timeless foundation.
    by Shrx & Us.
    (ปล. ห้ามบีบอัด code หรือย่อ code เอาแบบเต็มๆสมบูรณ์)
]]

-- =============================================================================
-- PART 0: THE ORIGINAL, PROVEN FOUNDATION
-- =============================================================================

repeat task.wait() until game:IsLoaded()

if game.PlaceId ~= 139394516128799 then
    return
end

local req = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
local HttpService = game:GetService("HttpService")

-- The original, correct DisconnectAll function.
function DisconnectAll(connections)
    task.spawn(function()
        for i, connection in pairs(connections) do
            if connection then
                connection:Disconnect()
                connections[i] = nil
            end
        end
    end)
end

if getgenv().Info and getgenv().Info.Connections then
    DisconnectAll(getgenv().Info.Connections)
end

-- We build upon the original, adding the new Warlord to our ranks.
getgenv().Info = {
    EngineOptions = {
        "Stockfish 17", "Lichess", "Stockfish Online", "ChessDB", "Haxor", "Next Chess Move", "Sunfish"
    },
    Connections = {},
}

getgenv().Settings = {
    AutoPlay = false,
    Engine = "Stockfish 17",
}

-- The original, trusted Rayfield UI.
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Window = Rayfield:CreateWindow({
    Name = "Chess Club - The Five Warlords",
    Icon = 0,
    LoadingTitle = "The Five Warlords",
    LoadingSubtitle = "by Shrx & Us",
    Theme = "Default",
    ToggleUIKeybind = "K",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Big Hub",
    },
    KeySystem = false,
})


-- =============================================================================
-- PART 1: THE BRAIN (Flawlessly integrating the new challenger with classic logic)
-- =============================================================================

function BestMove(engine)
    local selected = engine or getgenv().Settings.Engine
    
    repeat task.wait() until game:GetService("ReplicatedStorage").InternalClientEvents.GetActiveTableset:Invoke() ~= nil
    
    local FEN = game:GetService("ReplicatedStorage").InternalClientEvents.GetActiveTableset:Invoke():WaitForChild("FEN").Value
    local response

    if selected == "Stockfish 17" then
        local success, err = pcall(function()
            response = req({
                Url = "https://chess-api.com/v1",
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = HttpService:JSONEncode({ fen = FEN }),
            })
        end)

        if success and response and response.Success then
            local data = HttpService:JSONDecode(response.Body)
            return data.from, data.to
        else
            warn("[Engine] Stockfish 17 request failed:", err or (response and response.StatusCode) or "Unknown error")
        end

    elseif selected == "Lichess" then
        local success, err = pcall(function()
            response = req({
                Url = "https://lichess.org/api/cloud-eval?fen=" .. HttpService:UrlEncode(FEN),
                Method = "GET"
            })
        end)
        
        if success and response and response.Success then
            local data = HttpService:JSONDecode(response.Body)
            if data and not data.error and data.pvs and #data.pvs > 0 and data.pvs[1].moves then
                local uciMove = data.pvs[1].moves:split(" ")[1]
                if uciMove and #uciMove >= 4 then
                    return uciMove:sub(1, 2), uciMove:sub(3, 4)
                end
            else
                warn("[Engine] Lichess returned invalid data:", response.Body)
            end
        else
            warn("[Engine] Lichess request failed:", err or (response and response.StatusCode) or "Unknown error")
        end

    elseif selected == "Stockfish Online" then
        local success, err = pcall(function()
            response = req({Url = "https://stockfish.online/api/stockfish.php?fen=" .. HttpService:UrlEncode(FEN) .. "&depth=13&mode=bestmove"})
        end)
        if success and response and response.Success then
            local data = HttpService:JSONDecode(response.Body)
            if data and data.success and data.data then
                local move = data.data:match("bestmove (%S+)")
                if move and #move >= 4 then
                    return move:sub(1, 2), move:sub(3, 4)
                end
            end
        else
            warn("[Engine] Stockfish Online failed:", err or (response and response.StatusCode))
        end
        
    elseif selected == "ChessDB" then
        local success, err = pcall(function()
            response = req({Url = "http://www.chessdb.cn/cdb.php?action=querybest&board=" .. HttpService:UrlEncode(FEN)})
        end)
        if success and response and response.Success then
            local move = response.Body:match("move:([%w%d]+)")
            if move and #move >= 4 then
                return move:sub(1, 2), move:sub(3, 4)
            end
        else
            warn("[Engine] ChessDB failed:", err or (response and response.StatusCode))
        end

    elseif selected == "Haxor" then
        local success, err = pcall(function()
            response = req({Url = "https://haxor.fi/chess/x/api.php?fen=" .. HttpService:UrlEncode(FEN)})
        end)
        if success and response and response.Success then
            if response.Body and #response.Body >= 4 then
                return response.Body:sub(1, 2), response.Body:sub(3, 4)
            end
        else
            warn("[Engine] Haxor failed:", err or (response and response.StatusCode))
        end

    -- [THE NEW WARLORD] Integrated with the classic, proven method.
    elseif selected == "Next Chess Move" then
        local success, err = pcall(function()
            response = req({
                Url = "https://www.nextchessmove.com/api/v4/calculate?fen=" .. HttpService:UrlEncode(FEN),
                Method = "GET"
            })
        end)
        
        if success and response and response.Success then
            local data = HttpService:JSONDecode(response.Body)
            if data and data.best_move and data.best_move.uci then
                local uciMove = data.best_move.uci
                return uciMove:sub(1, 2), uciMove:sub(3, 4)
            else
                warn("[Engine] NCM returned invalid data:", response.Body)
            end
        else
            warn("[Engine] NCM request failed:", err or (response and response.StatusCode) or "Unknown error")
        end

    elseif selected == "Sunfish" then
        local success, result = pcall(function()
            local module = require(game:GetService("Players").LocalPlayer.PlayerScripts.AI.Sunfish)
            return module:GetBestMove(FEN, 2000)
        end)

        if success and result then
            return result
        else
            warn("[Engine] Sunfish engine failed:", result)
        end
    end
    
    return nil, nil
end

function PlayMove(engine)
    local from, to = BestMove(engine)

    task.wait()

    if from and to then
        game:GetService("ReplicatedStorage").Chess.SubmitMove:InvokeServer(from .. to)
        return true
    elseif from then
        game:GetService("ReplicatedStorage").Chess.SubmitMove:InvokeServer(from)
        return true
    else
        warn("[Move] Invalid move received. Cannot play.")
        return false
    end
end

function PlaySuccesfullMove()
    task.spawn(function()
        local outcome = PlayMove()
        local retries = 0

        while not outcome and retries < 5 do
            retries = retries + 1
            task.wait(1)
            outcome = PlayMove()
        end

        if not outcome then
            PlayMove("Sunfish")
            Rayfield:Notify({
                Title = "Warning!",
                Content = "The current engine API is unresponsive. Using Sunfish for this move.",
                Duration = 5,
                Image = "triangle-alert",
            })
        end
    end)
end

function AutoPlay()
    if not getgenv().Settings.AutoPlay then return end

    DisconnectAll(getgenv().Info.Connections)

    getgenv().Info.Connections["MoveRecieved"] = game:GetService("ReplicatedStorage").Chess.MovePlayedRemoteEvent.OnClientEvent:Connect(function(move)
        PlaySuccesfullMove()
    end)

    getgenv().Info.Connections["GameStart"] = game:GetService("ReplicatedStorage").Chess:WaitForChild("StartGameEvent").OnClientEvent:Connect(function(t1, t2)
        PlaySuccesfullMove()
    end)

    PlaySuccesfullMove()
end


-- =============================================================================
-- PART 2: THE UI (The Original, Proven Structure)
-- =============================================================================

local MainTab = Window:CreateTab("Main", "code-xml")

MainTab:CreateSection("Select Engine API")

MainTab:CreateDropdown({
    Name = "Engine API",
    Options = getgenv().Info.EngineOptions,
    CurrentOption = getgenv().Settings.Engine,
    MultipleOptions = false,
    Callback = function(Options)
        getgenv().Settings.Engine = Options[1]
    end,
})

MainTab:CreateSection("Play Best Move")

MainTab:CreateToggle({
    Name = "Auto Play Best Moves",
    CurrentValue = false,
    Callback = function(Value)
        getgenv().Settings.AutoPlay = Value
        if Value then
            AutoPlay()
        else
            DisconnectAll(getgenv().Info.Connections)
        end
    end,
})

MainTab:CreateButton({
    Name = "Play Best Move",
    Callback = function()
        PlaySuccesfullMove()
    end,
})

-- (ปล. ห้ามบีบอัด code หรือย่อ code เอาแบบเต็มๆสมบูรณ์)
